// ==========================================================================
// Layout
// ==========================================================================

//
// Grid-like layout system.
//
// The Layout object provides us with a column-style layout system. This file
// contains the basic structural elements, but classes should be complemented
// with width Utilities, for example:
//
//   <div class="o-layout">
//     <div class="o-layout__item  u-6of12">
//     </div>
//     <div class="o-layout__item  u-6of12">
//     </div>
//   </div>
//
// The above will create a two-column structure in which each column will
// fluidly fill half of the width of the parent. We can have more complex
// systems:
//
//   <div class="o-layout">
//     <div class="o-layout__item  u-1of12  u-1of12-medium">
//     </div>
//     <div class="o-layout__item  u-1of12  u-1of12-medium">
//     </div>
//     <div class="o-layout__item  u-1of12  u-1of12-medium">
//     </div>
//   </div>
//
// The above will create a system in which the first item will be 100% width
// until we enter our medium breakpoint, when it will become 33.333% width. The
// second and third items will be 50% of their parent, until they also become
// 33.333% width at the medium breakpoint.
//
// We can also manipulate entire layout systems by adding a series of Modifiers
// to the `.layout` Block. For example:
//
//   <div class="o-layout  o-layout--reverse">
//
// This will reverse the displayed order of the system so that it runs in the
// opposite order to our source, effectively flipping the system over.
//
//   <div class="o-layout  o-layout--[right|center]">
//
// This will cause the system to fill up from either the centre or the right
// hand side. Default behaviour is to fill up the layout system from the left.
//
// There are plenty more options available to us: explore them below.
//

// Here we set a variable assuming that default and module settings
// are not set globally. If they have been previously been defined,
// the following variable will be overriden and will be set to `true`.
$imported-global-settings: false !default;

@if ($imported-global-settings == false) {
  @warn "Oops! Have you included a global settings files?";
}


// By default we use the `font-size: 0;` trick to remove whitespace between.
// Set this to true in order to use a markup-based strategy like commenting out
// whitespace or minifying HTML.
$use-markup-fix: false !default;

$enable-layout--bleed:       false !default;
$enable-layout--tiny:        false !default;
$enable-layout--small:       false !default;
$enable-layout--large:       false !default;
$enable-layout--huge:        false !default;

$enable-layout--middle:      false !default;
$enable-layout--bottom:      false !default;

$enable-layout--center:      false !default;
$enable-layout--right:       false !default;
$enable-layout--reverse:     false !default;


// Default/mandatory classes.
// ==========================================================================
//
// 1. Allows us to use the layout object on any type of element.
// 2. We need to defensively reset any box-model properties.
// 3. Use the negative margin trick for multi-row grids:
//    http://csswizardry.com/2011/08/building-better-grid-systems/
//
.o-layout {
  display: block; // 1
  margin: 0; // 2
  padding: 0; // 2
  list-style: none; // 1
  margin-left: rem-calc(-$global-spacing-unit); // 3

  @if ($use-markup-fix == false) {
    font-size: 0;
  }

}


//
// 1. Required in order to combine fluid widths with fixed gutters.
// 2. Allows us to manipulate grids vertically, with text-level properties,
//    etc.
// 3. Default item alignment is with the tops of each other, like most
//    traditional grid/layout systems.
// 4. By default, all layout items are full-width (mobile first).
// 5. Gutters provided by left padding.
//
.o-layout__item {
  box-sizing: border-box; // 1
  display: inline-block; // 2
  vertical-align: top; // 3
  width: 100%; // 4
  padding-left: rem-calc($global-spacing-unit); // 5

  @if ($use-markup-fix == false) {
    @include font-size($global-font-size, none);
  }

}


// Gutter size modifiers.
// ==========================================================================
@if ($enable-layout--tiny) {
  .o-layout--tiny {
    margin-left: rem-calc(-$global-spacing-unit--tiny);

    > .o-layout__item {
      padding-left: rem-calc($global-spacing-unit--tiny);
    }

  }
}


@if ($enable-layout--small) {
  .o-layout--small {
    margin-left: rem-calc(-$global-spacing-unit--small);

    > .o-layout__item {
      padding-left: rem-calc($global-spacing-unit--small);
    }

  }
}


@if ($enable-layout--large) {
  .o-layout--large {
    margin-left: rem-calc(-$global-spacing-unit--large);

    > .o-layout__item {
      padding-left: rem-calc($global-spacing-unit--large);
    }

  }
}


@if ($enable-layout--huge) {
  .o-layout--huge {
    margin-left: rem-calc(-$global-spacing-unit--huge);

    > .o-layout__item {
      padding-left: rem-calc($global-spacing-unit--huge);
    }

  }
}


@if ($enable-layout--bleed) {
  .o-layout--bleed {
    margin-left: 0;

    > .o-layout__item {
      padding-left: 0;
    }

  }
}


// Vertical alignment modifiers.
// ==========================================================================
//
// Align all grid items to the middles of each other.
//
@if ($enable-layout--middle) {

  .o-layout--middle {

    > .o-layout__item {
      vertical-align: middle;
    }

  }
}


//
// Align all grid items to the bottoms of each other.
//
@if ($enable-layout--bottom) {
  .o-layout--bottom {

    > .o-layout__item {
      vertical-align: bottom;
    }

  }
}


// Fill order modifiers.
// ==========================================================================
//
// Fill up the layout system from the centre.
//
@if ($enable-layout--center) {
  .o-layout--center {
    text-align: center;

    > .o-layout__item {
      text-align: left;
    }

  }
}


//
// Fill up the layout system from the right-hand side.
//
@if ($enable-layout--right) {
  .o-layout--right {
    text-align: right;

    > .o-layout__item {
      text-align: left;
    }

  }
}


//
// Reverse the rendered order of the grid system.
//
@if ($enable-layout--reverse) {
  .o-layout--reverse {
    direction: rtl;

    > .o-layout__item {
      direction: ltr;
      text-align: left;
    }

  }
}
