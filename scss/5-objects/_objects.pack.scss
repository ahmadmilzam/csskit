// ==========================================================================
// Pack
// ==========================================================================
//
// The pack object simply causes any number of elements pack up horizontally to
// automatically fill an equal, fluid width of their parent.
//

// Here we set a variable assuming that default and module settings
// are not set globally. If they have been previously been defined,
// the following variable will be overriden and will be set to `true`.
$imported-global-settings: false !default;

@if ($imported-global-settings == false) {
  @warn "Oops! Have you included a global settings files?";
}


// Variable(s)
$pack-namespace:                     $global-namespace !default;

$enable-pack--auto:                  false !default;
$enable-pack--tiny:                  false !default;
$enable-pack--small:                 false !default;
$enable-pack--large:                 false !default;
$enable-pack--huge:                  false !default;
$enable-pack--rev:                   false !default;
$enable-pack--middle:                false !default;
$enable-pack--bottom:                false !default;



//
// 1. Fill all available space.
// 2. Cause children to be automatically equally sized.
//
.#{$pack-namespace}pack {
  width: 100%; // 1
  display: table;
  table-layout: fixed; // 2
}

//
// Cause children to adopt table-like structure.
//
.#{$pack-namespace}pack__item {
  display: table-cell;

  @if ($enable-pack--middle == true) {

    //
    // All items are aligned to the middles of each other.
    //
    .#{$pack-namespace}pack--middle > & {
      vertical-align: middle;
    }

  }

  @if ($enable-pack--bottom == true) {

    //
    // All items are aligned to the bottoms of each other.
    //
    .#{$pack-namespace}pack--bottom > & {
      vertical-align: bottom;
    }

  }

}


@if ($enable-pack--auto == true) {

  //
  // Cause children to pack up into available space, but not equally sized.
  //
  .#{$pack-namespace}pack--auto {
    table-layout: auto;
  }

}

@if ($enable-pack--tiny == true) {

  //
  // Tiny gutters between items.
  //
  .#{$pack-namespace}pack--tiny {
    border-spacing: $global-spacing-unit--tiny;
  }

}

@if ($enable-pack--small == true) {

  //
  // Small gutters between items.
  //
  .#{$pack-namespace}pack--small {
    border-spacing: $global-spacing-unit--small;
  }

}

@if ($enable-pack--large == true) {

  //
  // Large gutters between items.
  //
  .#{$pack-namespace}pack--large {
    border-spacing: $global-spacing-unit--large;
  }

}

@if ($enable-pack--huge == true) {

  //
  // Huge gutters between items.
  //
  .#{$pack-namespace}pack--huge {
    border-spacing: $global-spacing-unit--huge;
  }

}


@if ($enable-pack--rev == true) {

  //
  // Reversed order packs.
  //
  .#{$pack-namespace}pack--rev {
    direction: rtl;

    > .#{$pack-namespace}pack__item {
      direction: ltr;
    }

  }

}
