// ==========================================================================
// FLAG
// ==========================================================================
//
// The flag object is a design pattern similar to the media object, however it
// utilises `display: table[-cell];` to give us control over the vertical
// alignments of the text and image. csswizardry.com/2013/05/the-flag-object
//

// Here we set a variable assuming that default and module settings
// are not set globally. If they have been previously been defined,
// the following variable will be overriden and will be set to `true`.
$imported-global-settings: false !default;

@if ($imported-global-settings == false) {
  @warn "Oops! Have you included a global settings files?";
}


// Variable(s)
$enable-flag--tiny:                  false !default;
$enable-flag--small:                 false !default;
$enable-flag--large:                 false !default;
$enable-flag--huge:                  false !default;
$enable-flag--rev:                   false !default;
$enable-flag--bleed:                 false !default;
$enable-flag--top:                   false !default;
$enable-flag--bottom:                false !default;
$enable-flag--responsive:            false !default;
$flag-collapse-at:                   720px !default;


//
// 1. Allows us to control vertical alignments
// 2. Force the object to be the full width of its parent. Combined with [1],
//    this makes the object behave in a quasi-`display: block;` manner.
//
.#{$global-namespace}flag {
  display: table; // 1
  width: 100%; // 2
}

//
// Items within a flag object. There should only ever be one of each.
//
// 1. Default to aligning content to their middles.
// 2. Flag images have a space between them and the body of the object.
//
.#{$global-namespace}flag__img {
  display: table-cell;
  vertical-align: middle; // 1
  padding-right: rem-calc($global-spacing-unit); // 2

  > img {
    display: block;
    max-width: none;
  }

  //
  // Size variants [tiny|small|large|huge]
  // ==========================================================================
  //

  // Bleed flags.
  @if ($enable-flag--bleed == true) {
    //
    // Bleed flag objects have no space between the image- and text-content.
    //

    .#{$global-namespace}flag--bleed > & {
      padding-right: 0;
      padding-left: 0;
    }
  }

  // Tiny flags.
  @if ($enable-flag--tiny == true) {
    .#{$global-namespace}flag--tiny > & {
      padding-right: rem-calc($global-spacing-unit--tiny);
    }

    //
    // Tiny reversed flags.
    //
    @if ($enable-flag--rev == true) {
      .#{$global-namespace}flag--tiny.#{$global-namespace}flag--rev > & {
        padding-right: 0;
        padding-left: rem-calc($global-spacing-unit--tiny);
      }

    }
  }

  // Small flags.
  @if ($enable-flag--small == true) {
    .#{$global-namespace}flag--small > & {
      padding-right: rem-calc($global-spacing-unit--tiny);
    }

    //
    // Small reversed flags.
    //
    @if ($enable-flag--rev == true) {
      .#{$global-namespace}flag--small.#{$global-namespace}flag--rev > & {
        padding-right: 0;
        padding-left: rem-calc($global-spacing-unit--small);
      }

    }
  }

  // Large flags.
  @if ($enable-flag--large == true) {
    .#{$global-namespace}flag--large > & {
      padding-right: rem-calc($global-spacing-unit--large);
    }

    //
    // Large reversed flags.
    //
    @if ($enable-flag--rev == true) {
      .#{$global-namespace}flag--large.#{$global-namespace}flag--rev > & {
        padding-right: 0;
        padding-left: rem-calc($global-spacing-unit--large);
      }

    }
  }

  // Huge flags.
  @if ($enable-flag--huge == true) {
    .#{$global-namespace}flag--huge > & {
      padding-right: rem-calc($global-spacing-unit--huge);
    }

    //
    // Huge reversed flags.
    //
    @if ($enable-flag--rev == true) {
      .#{$global-namespace}flag--huge.#{$global-namespace}flag--rev > & {
        padding-right: 0;
        padding-left: rem-calc($global-spacing-unit--huge);
      }

    }
  }

}

//
//
//


//
// The container for the main content of the flag object.
//
// 1. Forces the `.flag__body` to take up all remaining space.
//
.#{$global-namespace}flag__body {
  width: 100%; // 1
}


//
// Alignment variants
// ==========================================================================
//
@if ($enable-flag--top == true) {

  //
  // Vertically top aligned flag objects.
  //

  .#{$global-namespace}flag--top > .#{$global-namespace}flag__img,
  .#{$global-namespace}flag--top > .#{$global-namespace}flag__body {
    vertical-align: top;
  }

}

@if ($enable-flag--bottom == true) {

  //
  // Vertically bottom aligned flag objects.
  //

  .#{$global-namespace}flag--bottom > .#{$global-namespace}flag__img,
  .#{$global-namespace}flag--bottom > .#{$global-namespace}flag__body {
    vertical-align: bottom;
  }

}


//
// Reversed flag
// ==========================================================================
//
@if ($enable-flag--rev == true) {

  //
  // Reversed flag objects have their image-content to the right, and text-content
  // to the left.
  //
  // 1. Swap the rendered direction of the object…
  // 2. …and reset it.
  // 3. Reassign margins to the correct sides.
  //

  .#{$global-namespace}flag--rev {
    direction: rtl; // 1

    > .#{$global-namespace}flag__img,
    > .#{$global-namespace}flag__body {
      direction: ltr; // 2
    }

    > .#{$global-namespace}flag__img {
      padding-right: 0; // 3
      padding-left: $global-spacing-unit; // 3
    }

  }

}


//
// Responsive flag
// ==========================================================================
//
@if ($enable-flag--responsive == true) {

  //
  // Responsive flag objects.
  //
  // There is a very pragmatic, simple implementation of a responsive flag
  // object, which simply places the text-content beneath the image-content.
  //
  // We use a `max-width` media query because:
  //
  // a) it is the least verbose method in terms of amount of code required.
  // b) the flag object's default state is image-next-to-text, so its stacked
  //    state is the exception, rather than the rule.
  //
  @media screen and (max-width: $flag-collapse-at) {

    @if ($enable-flag--rev == true) {
      .#{$global-namespace}flag--responsive {
        //
        // Disable reversal of content because there is no concept of
        // 'reversed' in a stacked layout.
        //
        direction: ltr;
      }
    }

    .#{$global-namespace}flag--responsive,
    .#{$global-namespace}flag--responsive> .#{$global-namespace}flag__img,
    .#{$global-namespace}flag--responsive> .#{$global-namespace}flag__body {
      display: block;
    }

    //
    // Rework the spacings on regular flag objects.
    //
    .#{$global-namespace}flag--responsive > .#{$global-namespace}flag__img {
      padding-right: 0;
      padding-left: 0;
      margin-bottom: $global-spacing-unit;
      > img {
        max-width: 100%;
      }
    }

  }

}
