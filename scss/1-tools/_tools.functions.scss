/* ==========================================================================
   FUNCTIONS
   ========================================================================== */

// Here we set a variable assuming that default settings are not set
// globally. If they have been previously been defined, the following variable
// will be overriden and will be set to `true`.
$imported-default-settings: false !default;

@if ($imported-default-settings == false) {
  @warn "Oops! Have you included a default settings file?"
}

/*
   Math Helpers.
   ========================================================================== */
/**
 * Half and double numbers, returning rounded integers. E.g.:
 * .foo{
 *  padding: half(30px)
 * }
 */

@function quarter($number) {
  @return round($number / 4);
}

@function half($number) {
  @return round($number / 2);
}

@function double($number) {
  @return round($number * 2);
}

@function quadruple($number) {
  @return round($number * 4);
}

@function scale-up($number) {
  @return round($number * 1.618);
}




/*
   Strip Unit
   ========================================================================== */
// It strips the unit of measure and returns it
@function parse-int($num) {
  @return $num / ($num * 0 + 1);
}




/*
   CONVERT TO REM
   ========================================================================== */
@function convert-to-rem($value, $base-value: $base-font-size){
  $value: parse-int($value) / parse-int($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}


/*
   Rem calc
   ========================================================================== */
/**
 * New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
 * Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
 * rem-calc(10 20 30px 40);
 * Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
 *
 *  rem-calc((10, 20, 30, 40px));
 *
 * Optionally call with a different base (eg: 8px) to calculate rem.
 *
 *  rem-calc(16px 32px 48px, 8px);
 *
 * If you require to comma separate your list
 *
 *  rem-calc((16px, 32px, 48), 8px);
 *
 *
 */

@function rem-calc($values, $base-value: $base-font-size) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}


/* ==========================================================================
   Grid Mixin, create complex layout ON DEMAND!
   ========================================================================== */

/**
 * In a world of agile development and
 * super-tablet-multi-magic-laptop-phones,
 * the best layouts can't be contained in a
 * single framework or technique.
 * CSS Libraries are a bloated mess of opinions about how to do your job.
 * Why let the table-saw tell you where to put the kitchen?
 * If we can create them ourself?
 */

// Here we set a variable assuming that default settings are not set
// globally. If they have been previously been defined, the following variable
// will be overriden and will be set to `true`.
$imported-default-settings: false !default;

@if ($imported-default-settings == false) {
  @warn "Oops! Have you included a default settings file?"
}


/*
   Grid Functions
   ========================================================================== */
// $column-number - Number of column in total from 1 to $columns-total
// $columns-total - Total columns that we used
@function grid-calc($column-number, $columns-total) {
  @return percentage(($column-number / $columns-total));
}


/*
   Grid Row
   ========================================================================== */

/**
 * For creating container, nested, and flushed rows
 * @param:
 *
 * $max-width, Given max-width value for the container. Default: $container-width.
 * $behavior - Any special behavior for this row? Default: false. Options: nest, flush, nest-flush, false.
 */
@mixin grid-row($max-width: $container-width, $behavior: false) {

  // use @include grid-row(nest); to include a nested row
  @if $behavior == nested {
    width: auto;
    margin-left: -($columns-gutter/2);
    margin-right: -($columns-gutter/2);
    margin-top: 0;
    margin-bottom: 0;
    max-width: none;
  }

  // use @include grid-row(flush); to flushed a container row margins
  @else if $behavior == flush {
    width: 100%;
    margin: 0;
    max-width: $container-width;
  }

  // use @include grid-row(nested-flush); to collapse outer margins on a nested row
  @else if $behavior == nested-flush {
    width: auto;
    margin: 0;
    max-width: none;
  }

  // use @include grid-row; to use a container row
  @else {
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    margin-top: 0;
    margin-bottom: 0;
    max-width: $container-width;
  }

  // Clearfix for all rows
  @extend %clearfix;

}/* close grid-row */


/*
   Grid Column
   ========================================================================== */
/**
 * Creates a column, should be used inside of a media query to control layouts
 *
 * @params:
 *
 * $columns - The number of columns this should be
 * $total-columns - The number of total columns
 * $last-column - Is this the last column? Default: false.
 * $center - Center these columns? Default: false.
 * $offset - # of columns to offset. Default: false.
 * $push - # of columns to push. Default: false.
 * $pull - # of columns to pull. Default: false.
 * $flush - Get rid of gutter padding on column? Default: false.
 * $float - Should this float? Default: true. Options: true, false, left, right.
 * $position - relative position, push and pull require position set. Default: false.
 */
@mixin grid-column(
  $columns:false,
  $total-columns: $columns-total,
  $last-column:false,
  $center:false,
  $offset:false,
  $push:false,
  $pull:false,
  $flush:false,
  $float:true,
  $position:false) {


    // If positioned for default .column, include relative position
    // push and pull require position set
    @if $position or $push or $pull {
      position: relative;
    }

    // If flushed, get rid of gutter padding
    @if $flush {
      padding-left: 0;
      padding-right: 0;
    }

    // Gutter padding whenever a column isn't set to collapse
    // (use $flush:null to do nothing)
    @else if $flush == false {
      padding-left: $columns-gutter / 2;
      padding-right: $columns-gutter / 2;
    }

    // If a column number is given, calculate width
    @if $columns {
      @if $columns == full{
        width: 100%;
      }
      @else {
        width: grid-calc($columns, $total-columns);
      }
      // If last column, float naturally instead of to the right
      @if $last-column { float: $opposite-float; }
    }

    // Source Ordering, adds left/right depending on which you use.
    @if $push { left: grid-calc($push, $total-columns); right: auto; }
    @if $pull { right: grid-calc($pull, $total-columns); left: auto; }

    @if $float {
      @if $float == left or $float == true { float: left; }
      @else if $float == right { float: right; }
      @else { float: none; }
    }

    // If centered, get rid of float and add appropriate margins
    @if $center {
      margin-left: auto;
      margin-right: auto;
      float: none;
    }

    // If offset, calculate appropriate margins
    @if $offset { margin-left: grid-calc($offset, $total-columns) !important; }

}/* close grid-column */


/*
   How To Use
   ========================================================================== */

/**
 * Mobile First Example
 *
 * .container{
 *   @include grid-row;
 * }
 *
 * .aside{
 *   @media #{condition}{
 *     @include grid-column(4);
 *   }
 * }
 *
 * .content{
 *   @media #{condition}{
 *     @include grid-column(8, $last:true);
 *   }
 * }
 */




/* ==========================================================================
   Tools Responsive
   ========================================================================== */

/*
   Ranges
   ========================================================================== */
// We use these functions to define ranges for various things,
// like media queries.
@function lower-bound($range){
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range,1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}




/*
   Media Query Conditions
   ========================================================================== */

$landscape: "#{$screen} and (orientation: landscape)";
$portrait: "#{$screen} and (orientation: portrait)";
$retina-device: $retina;

$small-up: $screen;
$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})";

$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})";
$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})";

$large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})";
$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})";

$xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})";
$xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})";

$xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})";
$xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})";