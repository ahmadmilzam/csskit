/* ==========================================================================
   HEADINGS
   ========================================================================== */

// Here we set a variable assuming that default settings are not set
// globally. If they have been previously been defined, the following variable
// will be overriden and will be set to `true`.
$imported-default-settings: false !default;

@if ($imported-default-settings == false) {
  @warn "Oops! Have you included a default settings file?";
}

$heading-size-min:           16px !default;
$heading-size-max:           36px !default;

// max font size and line height for small device
$heading-size-max-small:     30px !default;
$heading-line-height-small:  1.3 !default;

/**
 * A modified version of heading-size mixin from
 * https://gist.github.com/lolmaus/7825675
 *
 * @param   $max-size:    $heading-size-max
 * @param   $min-size:    $heading-size-min
 * @param   $max-heading: 1
 * @param   $min-heading: 6
 * @param   $ratio:       $golden
 * @param   $debug:       false
 */
@mixin heading-sizes($max-size: $heading-size-max, $min-size: $heading-size-min, $max-heading: 1, $min-heading: 6, $ratio: $golden, $line-height: false, $debug: false){
  $number-of-headings: $min-heading - $max-heading + 1;
  $scaled-size-of-max-heading: modular-scale($number-of-headings - 1, $min-size);
  $coefficient: 0;

  @if $ratio != 1{
    @if modular-scale(1, 1, $octave) != 2{
      @warn "Using heading-sizes with a ratio other than 1 requires modular-scale."
    }
    $coefficient: ($scaled-size-of-max-heading - $min-size) / ($max-size - $min-size);
  }

  @for $i from 1 through $number-of-headings {
    $heading: $number-of-headings - $i + $max-heading;

    h#{$heading},
    .h#{$heading},
    %h#{$heading}{
      $size: foo;

      @if $ratio == 1{
        $size-without-min: $max-size - $min-size;
        $increment: $size-without-min / ($number-of-headings - 1);
        $current-increment: $increment * ($i - 1);
        $size: $min-size + $current-increment;
      }
      @else{
        $scaled-size: modular-scale($i - 1, $min-size, $ratio);
        $difference: $scaled-size - $min-size;
        $shrinked-difference: $difference / $coefficient;
        $size: $min-size + $shrinked-difference;
      }

      @if $line-height == auto{
        @include font-size($size);
      }

      @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal){
        @include font-size($size, $line-height);
      }

      @if $debug{
        &:after{
          content: "#{$size}";
        }
      }
    }
  }

}


h1,h2,h3,h4,h5,h6{
  text-rendering: optimizeLegibility;
  word-wrap: break-word;
}

@include heading-sizes($max-size: $heading-size-max-small, $line-height: $heading-line-height-small);

@media #{$large-up}{
  h1, h2, h3, h4, h5, h6 { word-wrap: normal; }
  @include heading-sizes($max-size: $heading-size-max, $line-height: auto);
}
