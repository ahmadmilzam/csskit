/* ==========================================================================
   MIXINS
   ========================================================================== */
/**
 * We has a number of default mixins that the framework, and developers
 * working with it, can make use of.
 *

 *
 */

/*
   Font Size Mixin
   ========================================================================== */
/*
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
 * .foo {
 *   @include font-size(12px);
 * }
 *
 * This will generate a rem-based font-size as well as
 * a unitless line-height which will place the element on your baseline, e.g.:
 *
 * .foo {
 *   font-size: 0.75rem;
 *   line-height: 2;
 * }
 *
 * If you do not want inuitcss to generate you a line-height automatically, you
 * simply pass in your own as a second paramater:
 *
 * .foo {
 *   @include font-size(12px, 1.5);
 * }
 *
 * This will yield:
 *
 * .foo {
 *   font-size: 12px;
 *   font-size: 0.75rem;
 *   line-height: 1.5;
 * }
 *
 * This parameter can be any integer, 'inherit', or 'normal'. If you don't want
 * a line-height at all, pass in a second paramater of 'none' or 'false':
 *
 * .foo {
 *   @include font-size(12px, none);
 * }
 *
 * This will yield:
 * .foo {
 *   font-size: 12px;
 *   font-size: 0.75rem;
 * }
 */

@mixin font-size($font-size, $line-height: auto) {
  font-size: rem-calc($font-size);

  @if $line-height == auto {
    line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
  } @else {

    @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {
      line-height: $line-height;
    } @elseif ($line-height != none and $line-height != false) {
      @error "D'oh! '#{$line-height}' is not a valid value for `line-height`."
    }

  }

}

/*
   Clearfix hack by Nicolas Gallagher (https://github.com/necolas)
   ========================================================================== */
/**
 * We use this to do clear floats
 */
@mixin clearfix {
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}

/*
   Box Sizing
   ========================================================================== */
@mixin box-sizing($type: border-box) {
  -webkit-box-sizing: $type;
     -moz-box-sizing: $type;
          box-sizing: $type;
}

// @mixins
//
// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

// @mixins
//
// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  height: auto;
  width: auto;
  overflow: visible;
  clip: auto;
}


/* ==========================================================================
   Common CSS3 Mixins
   ========================================================================== */


/*======================================
=            DOUBLE BORDERS            =
======================================*/

@mixin double-borders(
  $colorOne: #3C3C3C,
  $colorTwo: #999999,
  $radius: 0) {

  border: 1px solid $colorOne;

  -webkit-box-shadow: 0 0 0 1px $colorTwo;
     -moz-box-shadow: 0 0 0 1px $colorTwo;
          box-shadow: 0 0 0 1px $colorTwo;

    @include border-radius( $radius );
}

/*-----  End of DOUBLE BORDERS  ------*/


/*===================================
=            TEXT SHADOW            =
===================================*/

@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) {
  text-shadow: $x $y $blur $color;
}

/*-----  End of TEXT SHADOW  ------*/


/*==================================
=            BOX SHADOW            =
==================================*/

@mixin box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4), $inset: "") {
  @if ($inset != "") {
    -webkit-box-shadow: $inset $x $y $blur $color;
       -moz-box-shadow: $inset $x $y $blur $color;
            box-shadow: $inset $x $y $blur $color;
  } @else {
    -webkit-box-shadow: $x $y $blur $color;
       -moz-box-shadow: $x $y $blur $color;
            box-shadow: $x $y $blur $color;
  }
}

/*-----  End of BOX SHADOW  ------*/


/*=================================
=            TRANSFORM            =
=================================*/

@mixin transform($params) {
  -webkit-transform: $params;
          transform: $params;
}

/*-----  End of TRANSFORM  ------*/


/*-----  End of SCALE  ------*/


/*==================================
=            TRANSITION            =
==================================*/

@mixin transition($property: all, $length: 0.3s, $easing: ease-out, $delay: 0s) {
  @if($property == transform){
    -webkit-transition: -webkit-#{$property} $length $easing $delay;        -webkit-transition: -webkit-#{$property} $length $easing $delay;
            transition: $property $length $easing $delay;                 transition: $property $length $easing $delay;
  } @else{
    -webkit-transition: $property $length $easing $delay;
            transition: $property $length $easing $delay;
  }
}

/*-----  End of TRANSITION  ------*/


/*=======================================
=            Vertical Middle            =
=======================================*/

@mixin vertical-middle{
  top: 50%;
  -webkit-transform: translateY(-50%);
     -moz-transform: translateY(-50%);
          transform: translateY(-50%);
}

/*-----  End of Vertical Middle  ------*/


/*=========================================
=            Horizontal Middle            =
==========================================*/

@mixin vertical-middle{
  left: 50%;
  -webkit-transform: translateX(-50%);
     -moz-transform: translateX(-50%);
          transform: translateX(-50%);
}

/*-----  End of Vertical Middle  ------*/


/*=====================================
=            Border Radius            =
======================================*/

// All side border-radius
@mixin border-radius($radius) {
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

// Single side border-radius
@mixin border-top-radius($radius) {
  border-top-right-radius: $radius !important;
  border-top-left-radius: $radius !important;
  background-clip: padding-box;
}
@mixin border-right-radius($radius) {
  border-bottom-right-radius: $radius !important;
  border-top-right-radius: $radius !important;
  background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
  border-bottom-right-radius: $radius !important;
  border-bottom-left-radius: $radius !important;
  background-clip: padding-box;
}
@mixin border-left-radius($radius) {
  border-top-left-radius: $radius !important;
  border-bottom-left-radius: $radius !important;
  background-clip: padding-box;
}

@mixin circle-radius{
  border-radius: 50%;
}

/*-----  End of Border Radius  ------*/